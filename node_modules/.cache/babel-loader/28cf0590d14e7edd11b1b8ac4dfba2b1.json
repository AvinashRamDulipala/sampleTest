{"ast":null,"code":"var _jsxFileName = \"D:\\\\Git\\\\ShopalityAdmin\\\\src\\\\component\\\\PrintButton.js\";\nimport React from 'react';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\n\nvar pxToMm = function pxToMm(px) {\n  return Math.floor(px / document.getElementById('myMm').offsetHeight);\n};\n\nvar mmToPx = function mmToPx(mm) {\n  return document.getElementById('myMm').offsetHeight * mm;\n};\n\nvar range = function range(start, end) {\n  return Array(end - start).join(0).split(0).map(function (val, id) {\n    return id + start;\n  });\n};\n\nvar PrintButton = function PrintButton(_ref) {\n  var id = _ref.id,\n      label = _ref.label;\n  return React.createElement(\"div\", {\n    className: \"tc mb4 mt2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"myMm\",\n    style: {\n      height: \"1mm\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"pa2 ba bw1 b--black bg-yellow black-90 br2 dib pointer dim shadow-1\",\n    onClick: function onClick() {\n      var input = document.getElementById(id);\n      var inputHeightMm = pxToMm(input.offsetHeight);\n      var a4WidthMm = 210;\n      var a4HeightMm = 297;\n      var a4HeightPx = mmToPx(a4HeightMm);\n      var numPages = inputHeightMm <= a4HeightMm ? 1 : Math.floor(inputHeightMm / a4HeightMm) + 1;\n      console.log({\n        input: input,\n        inputHeightMm: inputHeightMm,\n        a4HeightMm: a4HeightMm,\n        a4HeightPx: a4HeightPx,\n        numPages: numPages,\n        range: range(0, numPages),\n        comp: inputHeightMm <= a4HeightMm,\n        inputHeightPx: input.offsetHeight\n      });\n      html2canvas(input).then(function (canvas) {\n        var imgData = canvas.toDataURL('image/png'); //   let pdf;\n        //   // Document of a4WidthMm wide and inputHeightMm high\n        //   if (inputHeightMm > a4HeightMm) {\n        //     // elongated a4 (system print dialog will handle page breaks)\n        //      pdf = new jsPDF('p', 'mm', [inputHeightMm+16, a4WidthMm]);\n        //   } else {\n        //     // standard a4\n        //      pdf = new jsPDF();\n        //   }\n\n        var pdf = new jsPDF('p', 'px', 'a4');\n        var width = pdf.internal.pageSize.getWidth();\n        var height = pdf.internal.pageSize.getHeight();\n        pdf.addImage(imgData, 'PNG', 0, 0, width, height);\n        pdf.save(\"\".concat(id, \".pdf\"));\n      });\n      ; ////////////////////////////////////////////////////////\n      // System to manually handle page breaks\n      // Wasn't able to get it working !\n      // The idea is to break html2canvas screenshots into multiple chunks and stich them together as a pdf\n      // If you get this working, please email me a khuranashivek@outlook.com and I'll update the article\n      ////////////////////////////////////////////////////////\n      // range(0, numPages).forEach((page) => {\n      //   console.log(`Rendering page ${page}. Capturing height: ${a4HeightPx} at yOffset: ${page*a4HeightPx}`);\n      //   html2canvas(input, {height: a4HeightPx, y: page*a4HeightPx})\n      //     .then((canvas) => {\n      //       const imgData = canvas.toDataURL('image/png');\n      //       console.log(imgData)\n      //       if (page > 0) {\n      //         pdf.addPage();\n      //       }\n      //       pdf.addImage(imgData, 'PNG', 0, 0);\n      //     });\n      //   ;\n      // });\n      // setTimeout(() => {\n      //   pdf.save(`${id}.pdf`);\n      // }, 5000);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, label));\n};\n\nexport default PrintButton;","map":{"version":3,"sources":["D:\\Git\\ShopalityAdmin\\src\\component\\PrintButton.js"],"names":["React","html2canvas","jsPDF","pxToMm","px","Math","floor","document","getElementById","offsetHeight","mmToPx","mm","range","start","end","Array","join","split","map","val","id","PrintButton","label","height","input","inputHeightMm","a4WidthMm","a4HeightMm","a4HeightPx","numPages","console","log","comp","inputHeightPx","then","canvas","imgData","toDataURL","pdf","width","internal","pageSize","getWidth","getHeight","addImage","save"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport html2canvas from 'html2canvas';\r\nimport jsPDF from 'jspdf';\r\n\r\nconst pxToMm = (px) => {\r\n  return Math.floor(px/document.getElementById('myMm').offsetHeight);\r\n};\r\n\r\nconst mmToPx = (mm) => {\r\n  return document.getElementById('myMm').offsetHeight*mm;\r\n};\r\n\r\nconst range = (start, end) => {\r\n    return Array(end-start).join(0).split(0).map(function(val, id) {return id+start});\r\n};\r\n\r\n\r\nconst PrintButton = ({id, label}) => (<div className=\"tc mb4 mt2\">\r\n  {/*\r\n    Getting pixel height in milimeters:\r\n    https://stackoverflow.com/questions/7650413/pixel-to-mm-equation/27111621#27111621\r\n  */}\r\n  <div id=\"myMm\" style={{height: \"1mm\"}} />\r\n\r\n\r\n  <div\r\n    className=\"pa2 ba bw1 b--black bg-yellow black-90 br2 dib pointer dim shadow-1\"\r\n    onClick={() => {\r\n      const input = document.getElementById(id);\r\n      const inputHeightMm = pxToMm(input.offsetHeight);\r\n      const a4WidthMm = 210;\r\n      const a4HeightMm = 297; \r\n      const a4HeightPx = mmToPx(a4HeightMm); \r\n      const numPages = inputHeightMm <= a4HeightMm ? 1 : Math.floor(inputHeightMm/a4HeightMm) + 1;\r\n      console.log({\r\n        input, inputHeightMm, a4HeightMm, a4HeightPx, numPages, range: range(0, numPages), \r\n        comp: inputHeightMm <= a4HeightMm, inputHeightPx: input.offsetHeight\r\n      });\r\n      \r\n\r\n      html2canvas(input)\r\n        .then((canvas) => {\r\n          const imgData = canvas.toDataURL('image/png');\r\n        //   let pdf;\r\n        //   // Document of a4WidthMm wide and inputHeightMm high\r\n        //   if (inputHeightMm > a4HeightMm) {\r\n        //     // elongated a4 (system print dialog will handle page breaks)\r\n        //      pdf = new jsPDF('p', 'mm', [inputHeightMm+16, a4WidthMm]);\r\n        //   } else {\r\n        //     // standard a4\r\n        //      pdf = new jsPDF();\r\n        //   }\r\n\r\n        const pdf = new jsPDF('p', 'px', 'a4');\r\n        var width = pdf.internal.pageSize.getWidth();\r\n        var height = pdf.internal.pageSize.getHeight();\r\n\r\n        pdf.addImage(imgData, 'PNG', 0, 0, width, height);\r\n         \r\n          pdf.save(`${id}.pdf`);\r\n        });\r\n      ;\r\n      \r\n      ////////////////////////////////////////////////////////\r\n      // System to manually handle page breaks\r\n      // Wasn't able to get it working !\r\n      // The idea is to break html2canvas screenshots into multiple chunks and stich them together as a pdf\r\n      // If you get this working, please email me a khuranashivek@outlook.com and I'll update the article\r\n      ////////////////////////////////////////////////////////\r\n      // range(0, numPages).forEach((page) => {\r\n      //   console.log(`Rendering page ${page}. Capturing height: ${a4HeightPx} at yOffset: ${page*a4HeightPx}`);\r\n      //   html2canvas(input, {height: a4HeightPx, y: page*a4HeightPx})\r\n      //     .then((canvas) => {\r\n      //       const imgData = canvas.toDataURL('image/png');\r\n      //       console.log(imgData)\r\n      //       if (page > 0) {\r\n      //         pdf.addPage();\r\n      //       }\r\n      //       pdf.addImage(imgData, 'PNG', 0, 0);\r\n      //     });\r\n      //   ;\r\n      // });\r\n\r\n      // setTimeout(() => {\r\n      //   pdf.save(`${id}.pdf`);\r\n      // }, 5000);\r\n\r\n      \r\n    }}\r\n  >\r\n    {label}\r\n  </div>\r\n</div>);\r\n\r\nexport default PrintButton;"]},"metadata":{},"sourceType":"module"}